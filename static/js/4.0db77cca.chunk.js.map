{"version":3,"sources":["components/Person/MyPosts/Post/Post.jsx","components/Person/MyPosts/MyPost.jsx","components/Person/MyPosts/MyPostContainer.jsx","components/Person/ProfileStatus/ProfileStatusWithHooks.jsx","components/Person/ProfileInfo/ProfileDataForm.jsx","components/Person/ProfileInfo/ProfileInfo.jsx","components/Person/Person.jsx","components/Person/PersonContainer.jsx"],"names":["Post","props","className","message","likesCounter","maxLength","maxLengthCreator","ReduxMyPostForm","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","name","autoComplete","validate","type","placeholder","MyPost","postElement","postData","map","el","id","values","addPost","myPostText","MyPostContainer","connect","state","profilePage","newPostText","dispatch","addPostActionCreator","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onClick","value","onChange","e","target","onBlur","updateStatus","onFocus","select","autoFocus","ProfileDataReduxForm","profile","error","createField","Textarea","Object","keys","contacts","key","PersonData","fullName","isOwner","lookingForAJob","lookingForAJobDescription","aboutMe","contactTitle","contactValue","Contact","PersonInfo","Preloader","src","photos","large","userPhoto","alt","files","length","savePhoto","hidden","initialValues","formData","saveProfile","then","Person","PersonContainer","userId","this","match","params","myId","getProfile","getStatus","refreshProfile","prevProps","React","Component","compose","auth","setUserProfile","getProfileThunkCreator","getStatusThunkCreator","updateStatusThunkCreator","savePhotoThunkCreator","saveProfileThunkCreator","withRouter","AuthRedirect"],"mappings":"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","file":"static/js/4.0db77cca.chunk.js","sourcesContent":["import '../../Person.scss';\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className=\"person__posts--area--item\">\r\n  \r\n                <div className=\"avatar\"></div>\r\n                <p className=\"post__text\">{props.message}</p>\r\n       \r\n            <div className=\"post__likes\"> Понравилось <span>{props.likesCounter}</span> </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Post;\r\n","import \"../Person.scss\";\r\nimport Post from \"./Post/Post\";\r\nimport React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator } from \"../../../utils/validators/validators\";\r\nimport { Input } from \"../../common/FormsControls/FormsControls\";\r\n\r\nconst MyPost = (props) => {\r\n  let addPost = (values) => {\r\n    props.addPost(values.myPostText);\r\n    values.myPostText = \"\";\r\n  };\r\n\r\n  let postElement = props.postData.map((el) => (\r\n    <Post likesCounter={el.likesCounter} message={el.message} key={el.id} />\r\n  ));\r\n  return (\r\n    <div className=\"person__posts\">\r\n      <h3>Мои новости</h3>\r\n      <ReduxMyPostForm onSubmit={addPost} />\r\n      <div className=\"person__posts--area\">{postElement}</div>\r\n    </div>\r\n  );\r\n};\r\nconst maxLength = maxLengthCreator(20);\r\n\r\nconst MyPostForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit}>\r\n      <Field\r\n        component={Input}\r\n        name={\"myPostText\"}\r\n        autoComplete=\"off\"\r\n        className=\"person__posts--textarea\"\r\n        validate={[maxLength]}\r\n        type=\"text\"\r\n        placeholder=\"Что нового?\"\r\n      />\r\n      <button className=\"person__posts--btn\">Отправить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst ReduxMyPostForm = reduxForm({\r\n  form: \"myPost\",\r\n})(MyPostForm);\r\n\r\nexport default MyPost;\r\n","import { connect } from \"react-redux\";\r\nimport { addPostActionCreator } from \"../../../redux/profile-reducer\";\r\nimport MyPost from \"./MyPost\";\r\n\r\n// const MyPostContainer = (props) => {\r\n//     let state = props.store.getState();\r\n\r\n//     let onPostChange = (text) => {\r\n//         props.store.dispatch(updateNewPostTextActionCreator(text));\r\n\r\n//     }\r\n//     let addPost = () => {\r\n//         props.store.dispatch(addPostActionCreator());\r\n//     }\r\n\r\n//     return (\r\n//         <MyPost updateNewPostText={onPostChange} addPost={addPost} postData={state.profilePage.postData} newPostText={state.profilePage.newPostText} />\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    postData: state.profilePage.postData,\r\n    newPostText: state.profilePage.newPostText,\r\n  };\r\n};\r\n\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addPost: (myPostText) => {\r\n      dispatch(addPostActionCreator(myPostText));\r\n    },\r\n  };\r\n};\r\n\r\nconst MyPostContainer = connect(mapStateToProps, mapDispatchToProps)(MyPost);\r\n\r\nexport default MyPostContainer;\r\n","import React, { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport \"./../Person.scss\";\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n  let [editMode, setEditMode] = useState(true);\r\n  let [status, setStatus] = useState(props.status);\r\n\r\n  useEffect(() => {\r\n    setStatus(props.status);\r\n  }, [props.status]);\r\n\r\n  const changeMode = () => {\r\n    setEditMode(false);\r\n  };\r\n\r\n  const unChangeMode = () => {\r\n    setEditMode(true);\r\n    props.updateStatus(status);\r\n  };\r\n\r\n  const onStatusChange = (e) => {\r\n    setStatus(e.target.value);\r\n  };\r\n\r\n  const focusInput = (e) => {\r\n    e.target.select();\r\n  };\r\n\r\n  return (\r\n    <div className=\"person__status\">\r\n      {editMode ? (\r\n        <span onClick={changeMode}>\"{props.status || \"Введите статус\"}\"</span>\r\n      ) : (\r\n        <input\r\n          className=\"person__status--input\"\r\n          value={status}\r\n          onChange={onStatusChange}\r\n          onBlur={unChangeMode}\r\n          onFocus={focusInput}\r\n          autoFocus={true}\r\n          type=\"text\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default ProfileStatusWithHooks;\r\n","import { reduxForm } from \"redux-form\";\r\nimport {\r\n  createField,\r\n  Input,\r\n  Textarea,\r\n} from \"../../common/FormsControls/FormsControls\";\r\nimport \"./../Person.scss\";\r\n\r\nconst PersonDataForm = ({ handleSubmit, profile, error }) => {\r\n  return (\r\n    <div>\r\n      <div className=\"person__info\">\r\n        <form onSubmit={handleSubmit}>\r\n          {error && <div className=\"form__summaryError\">{error}</div>}\r\n          <div className=\"person__name--container\">\r\n            <h3 className=\"person__name\">\r\n              Имя: {createField(\"Имя\", \"fullName\", [], Input)}\r\n            </h3>\r\n            <button>Сохранить</button>\r\n          </div>\r\n\r\n          <div className=\"person__line\"></div>\r\n          <p>\r\n            Ищу работу:\r\n            {createField(\"\", \"lookingForAJob\", [], Input, { type: \"checkbox\" })}\r\n          </p>\r\n          <p>\r\n            Мои умения:{\" \"}\r\n            {createField(\r\n              \"Мои умения\",\r\n              \"lookingForAJobDescription\",\r\n              [],\r\n              Textarea\r\n            )}\r\n          </p>\r\n\r\n          <p>\r\n            Информация обо мне:{\" \"}\r\n            {createField(\"Информация обо мне\", \"aboutMe\", [], Textarea)}\r\n          </p>\r\n          <div className=\"person__contacts\">\r\n            <h5>Контакты</h5>\r\n            <ul>\r\n              {Object.keys(profile.contacts).map((key) => {\r\n                return (\r\n                  <div key={key}>\r\n                    <p>\r\n                      {key}: {createField(key, \"contacts.\" + key, [], Input)}\r\n                    </p>\r\n                  </div>\r\n                );\r\n              })}\r\n            </ul>\r\n          </div>\r\n        </form>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst ProfileDataReduxForm = reduxForm({ form: \"edit-profile\" })(\r\n  PersonDataForm\r\n);\r\n\r\nexport default ProfileDataReduxForm;\r\n","import Preloader from \"../../common/Preloader/Preloader\";\r\nimport \"../Person.scss\";\r\nimport userPhoto from \"../../../assets/img/userDF.png\";\r\n// import ProfileStatus from '../ProfileStatus/ProfileStatus';\r\nimport ProfileStatusWithHooks from \"../ProfileStatus/ProfileStatusWithHooks\";\r\nimport { useState } from \"react\";\r\nimport ProfileDataReduxForm from \"./ProfileDataForm\";\r\n\r\nconst PersonInfo = (props) => {\r\n  let [editMode, setEditMode] = useState(false);\r\n\r\n  if (!props.profile) {\r\n    return <Preloader />;\r\n  }\r\n\r\n  const mainPhotoSelection = (e) => {\r\n    if (e.target.files.length) {\r\n      props.savePhoto(e.target.files[0]);\r\n    }\r\n  };\r\n\r\n  const onSubmit = (formData) => {\r\n    props.saveProfile(formData).then(() => {\r\n      setEditMode(false);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"person__header\"></div>\r\n      <div className=\"person__avatar\">\r\n        <label>\r\n          <img\r\n            className=\"person__avatar--img\"\r\n            src={props.profile.photos.large || userPhoto}\r\n            alt=\"Аватар\"\r\n          />\r\n          {props.isOwner && (\r\n            <input type={\"file\"} onChange={mainPhotoSelection} hidden />\r\n          )}\r\n        </label>\r\n      </div>\r\n      <div className=\"person__status--container\">\r\n        <ProfileStatusWithHooks\r\n          status={props.status}\r\n          updateStatus={props.updateStatus}\r\n        />\r\n      </div>\r\n\r\n      {editMode ? (\r\n        <ProfileDataReduxForm\r\n          initialValues={props.profile}\r\n          onSubmit={onSubmit}\r\n          profile={props.profile}\r\n        />\r\n      ) : (\r\n        <PersonData\r\n          profile={props.profile}\r\n          isOwner={props.isOwner}\r\n          setEditMode={() => {\r\n            setEditMode(true);\r\n          }}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nconst PersonData = (props) => {\r\n  return (\r\n    <div className=\"person__info\">\r\n      <div className=\"person__name--container\">\r\n        <h3 className=\"person__name\">{props.profile.fullName}</h3>\r\n        {props.isOwner && (\r\n          <button onClick={props.setEditMode}>Редактировать</button>\r\n        )}\r\n      </div>\r\n      <div className=\"person__line\"></div>\r\n      <p>\r\n        <span>Ищу работу: </span>\r\n        {props.profile.lookingForAJob ? \"Да\" : \"Нет\"}\r\n      </p>\r\n      {props.profile.lookingForAJob && (\r\n        <p>\r\n          <span>Мои умения: </span>\r\n          {props.profile.lookingForAJobDescription}\r\n        </p>\r\n      )}\r\n      <p>\r\n        <span>Информация обо мне: </span>\r\n        {props.profile.aboutMe}\r\n      </p>\r\n      <div className=\"person__contacts\">\r\n        <h5>Контакты</h5>\r\n        <ul>\r\n          {Object.keys(props.profile.contacts).map((key) => {\r\n            return (\r\n              <Contact\r\n                key={key}\r\n                contactTitle={key}\r\n                contactValue={props.profile.contacts[key]}\r\n              />\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport const Contact = (props) => {\r\n  return (\r\n    <li>\r\n      <span>{props.contactTitle}: </span> \r\n      {props.contactValue ? props.contactValue : \"Не указан\"}\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default PersonInfo;\r\n","import MyPostContainer from \"./MyPosts/MyPostContainer\";\r\nimport \"./Person.scss\";\r\nimport PersonInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\nconst Person = (props) => {\r\n  return (\r\n    <section className=\"person\">\r\n      <PersonInfo\r\n        profile={props.profile}\r\n        status={props.status}\r\n        updateStatus={props.updateStatus}\r\n        isOwner={props.isOwner}\r\n        savePhoto={props.savePhoto}\r\n        saveProfile={props.saveProfile}\r\n      />\r\n      <MyPostContainer />\r\n    </section>\r\n  );\r\n};\r\n\r\nexport default Person;\r\n","import React from \"react\";\r\nimport Person from \"./Person\";\r\nimport \"./Person.scss\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  getProfileThunkCreator,\r\n  getStatusThunkCreator,\r\n  setUserProfile,\r\n  updateStatusThunkCreator,\r\n  savePhotoThunkCreator,\r\n  saveProfileThunkCreator\r\n} from \"../../redux/profile-reducer\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport { AuthRedirect } from \"../../hoc/AuthRedirect\";\r\nimport { compose } from \"redux\";\r\n\r\nclass PersonContainer extends React.Component {\r\n  refreshProfile() {\r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.myId;\r\n    }\r\n    this.props.getProfile(userId);\r\n    this.props.getStatus(userId);\r\n  }\r\n\r\n  componentDidMount() {\r\n    this.refreshProfile();\r\n  }\r\n  componentDidUpdate(prevProps) {\r\n    if (this.props.match.params.userId !== prevProps.match.params.userId) {\r\n      this.refreshProfile();\r\n    }\r\n  }\r\n  render() {\r\n    return (\r\n      <Person\r\n        {...this.props}\r\n        profile={this.props.profile}\r\n        isOwner={!this.props.match.params.userId}\r\n        savePhoto={this.props.savePhoto}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\n// let AuthRedirectComponent = AuthRedirect(PersonContainer); //hoc\r\n\r\n// let mapStateToPropsForRedirect = (state) => ({\r\n//   isAuth: state.auth.isAuth,\r\n// });\r\n// AuthRedirectComponent = connect(mapStateToPropsForRedirect)(AuthRedirectComponent); //второй конект для хока... херня какая-то\r\n\r\nlet mapStateToProps = (state) => ({\r\n  profile: state.profilePage.profile,\r\n  status: state.profilePage.status,\r\n  myId: state.auth.userId,\r\n});\r\n\r\n// let UrlDataContainerComponent = withRouter(PersonContainer);\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {\r\n    setUserProfile,\r\n    getProfile: getProfileThunkCreator,\r\n    getStatus: getStatusThunkCreator,\r\n    updateStatus: updateStatusThunkCreator,\r\n    savePhoto: savePhotoThunkCreator,\r\n    saveProfile: saveProfileThunkCreator\r\n  }),\r\n  withRouter,\r\n  AuthRedirect\r\n)(PersonContainer);\r\n"],"sourceRoot":""}