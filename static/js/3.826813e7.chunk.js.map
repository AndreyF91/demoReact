{"version":3,"sources":["components/Dialogs/Dialog/Dialog.jsx","components/Dialogs/Message/Message.jsx","components/Dialogs/Dialogs.jsx","components/Dialogs/DialogsContainer.jsx"],"names":["Dialog","props","userId","id","userName","name","className","to","Message","src","alt","message","maxLength","maxLengthCreator","DialogsFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Input","type","autoComplete","placeholder","validate","required","Dialogs","state","messagesPage","dialogsElements","dialogsData","map","el","messageElement","messagesData","values","addMessage","newMessage","compose","connect","dispatch","addMessageActionCreator","AuthRedirect"],"mappings":"sOAceA,EAXA,SAACC,GACZ,IAAIC,EAAS,YAAcD,EAAME,GAC7BC,EAAWH,EAAMI,KAErB,OACI,qBAAKC,UAAU,0BAAf,SACI,cAAC,IAAD,CAASC,GAAIL,EAAb,SAAsBE,OCOnBI,EAdC,SAACP,GACb,OACI,sBAAKK,UAAU,yBAAf,UACI,sBAAKA,UAAU,2BAAf,UACI,4BAAIL,EAAMG,WACV,qBAAKK,IAAI,+EAA+EC,IAAI,GAAGJ,UAAU,cAE7G,qBAAKA,UAAU,6BAAf,SACI,4BAAIL,EAAMU,gBC4BpBC,EAAYC,YAAiB,IAmB7BC,EAAmBC,YAAU,CAAEC,KAAM,sBAAlBD,EAjBL,SAACd,GACnB,OACE,uBAAMgB,SAAUhB,EAAMiB,aAAcZ,UAAU,oBAA9C,UACE,cAACa,EAAA,EAAD,CACEC,UAAWC,IACXC,KAAK,OACLC,aAAa,MACblB,KAAM,aACNC,UAAU,0BACVkB,YAAY,0GACZC,SAAU,CAAEC,IAAUd,KAExB,wBAAQN,UAAU,yBAAlB,2EAOSqB,EAnDC,SAAC1B,GACf,IAAI2B,EAAQ3B,EAAM4B,aAEdC,EAAkBF,EAAMG,YAAYC,KAAI,SAACC,GAAD,OAC1C,cAAC,EAAD,CAAQ5B,KAAM4B,EAAG5B,KAAMF,GAAI8B,EAAG9B,QAE5B+B,EAAiBN,EAAMO,aAAaH,KAAI,SAACC,GAAD,OAC1C,cAAC,EAAD,CAAS7B,SAAS,qBAAMO,QAASsB,EAAGtB,aAOtC,OACE,sBAAKL,UAAU,UAAf,UACE,mFACA,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,oBAAf,SAAoCwB,IACpC,qBAAKxB,UAAU,kBACf,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,mBAAf,SAAmC4B,IACnC,cAACpB,EAAD,CAAkBG,SAZT,SAACmB,GAChBnC,EAAMoC,WAAWD,EAAOE,yBC8BbC,4BACbC,aAxBoB,SAACZ,GACrB,MAAO,CACLC,aAAcD,EAAMC,iBAGC,SAACY,GACxB,MAAO,CACLJ,WAAY,SAACC,GACXG,EAASC,YAAwBJ,SAiBrCK,IAFaJ,CAGbZ","file":"static/js/3.826813e7.chunk.js","sourcesContent":["import { NavLink } from 'react-router-dom';\r\nimport '../Dialogs.scss';\r\n\r\nconst Dialog = (props) => {\r\n    let userId = \"/dialogs/\" + props.id;\r\n    let userName = props.name;\r\n\r\n    return (\r\n        <div className=\"dialogs__messages--item\">\r\n            <NavLink to={userId}>{userName}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialog;","import '../Dialogs.scss';\r\n\r\nconst Message = (props) => {\r\n    return (\r\n        <div className=\"dialogs__content--item\">\r\n            <div className=\"dialogs__content--avatar\">\r\n                <p>{props.userName}</p>\r\n                <img src=\"https://i.pinimg.com/originals/ff/a0/9a/ffa09aec412db3f54deadf1b3781de2a.png\" alt=\"\" className=\"avatar\" />\r\n            </div>\r\n            <div className=\"dialogs__content--textarea\">\r\n                <p>{props.message}</p>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Message;","import React from \"react\";\r\nimport { Field, reduxForm } from \"redux-form\";\r\nimport { maxLengthCreator, required } from \"../../utils/validators/validators\";\r\nimport { Input } from \"../common/FormsControls/FormsControls\";\r\nimport Dialog from \"./Dialog/Dialog\";\r\nimport \"./Dialogs.scss\";\r\nimport Message from \"./Message/Message\";\r\n\r\nconst Dialogs = (props) => {\r\n  let state = props.messagesPage;\r\n\r\n  let dialogsElements = state.dialogsData.map((el) => (\r\n    <Dialog name={el.name} id={el.id} />\r\n  ));\r\n  let messageElement = state.messagesData.map((el) => (\r\n    <Message userName=\"Имя\" message={el.message} />\r\n  ));\r\n\r\n  let addMessage = (values) => {\r\n    props.addMessage(values.newMessage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"dialogs\">\r\n      <h2>Cообщения</h2>\r\n      <div className=\"dialogs__wrapper\">\r\n        <div className=\"dialogs__messages\">{dialogsElements}</div>\r\n        <div className=\"dialogs__line\"></div>\r\n        <div className=\"dialogs__inner\">\r\n          <div className=\"dialogs__content\">{messageElement}</div>\r\n          <DialogsFormRedux onSubmit={addMessage} />\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\n\r\nconst maxLength = maxLengthCreator(10);\r\n\r\nconst DialogsForm = (props) => {\r\n  return (\r\n    <form onSubmit={props.handleSubmit} className=\"dialogs__textarea\">\r\n      <Field\r\n        component={Input}\r\n        type=\"text\"\r\n        autoComplete=\"off\"\r\n        name={\"newMessage\"}\r\n        className=\"dialogs__textarea--text\"\r\n        placeholder=\"Напишите сообщение\"\r\n        validate={[ required, maxLength]}\r\n      />\r\n      <button className=\"dialogs__textarea--btn\"> Отправить</button>\r\n    </form>\r\n  );\r\n};\r\n\r\nconst DialogsFormRedux = reduxForm({ form: \"dialogsDialogsForm\" })(DialogsForm);\r\n\r\nexport default Dialogs;\r\n","import { connect } from \"react-redux\";\r\nimport { compose } from \"redux\";\r\nimport { AuthRedirect } from \"../../hoc/AuthRedirect\";\r\nimport {\r\n  addMessageActionCreator,\r\n} from \"../../redux/messages-reducer\";\r\nimport Dialogs from \"./Dialogs\";\r\nimport \"./Dialogs.scss\";\r\n\r\n// const DialogsContainer = (props) => {\r\n//     let state = props.store.getState().messagesPage;\r\n\r\n//     let onMessageChange = (text) => {\r\n//         props.store.dispatch(updateNewMessageTextActionCreator(text));\r\n//     }\r\n\r\n//     let addMessage = () => {\r\n//         props.store.dispatch(addMessageActionCreator());\r\n//     }\r\n\r\n//     return (\r\n//         <Dialogs updateNewMessageText={onMessageChange} addMessage={addMessage} messagesPage={state}\r\n//         />\r\n//     )\r\n// }\r\n\r\nlet mapStateToProps = (state) => {\r\n  return {\r\n    messagesPage: state.messagesPage,\r\n  };\r\n};\r\nlet mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    addMessage: (newMessage) => {\r\n      dispatch(addMessageActionCreator(newMessage));\r\n    },\r\n  };\r\n};\r\n\r\n// let AuthRedirectComponent = AuthRedirect(Dialogs);\r\n\r\n// // let mapStateToPropsForRedirect = (state) => ({\r\n// //   isAuth: state.auth.isAuth,\r\n// // });\r\n// // AuthRedirectComponent = connect(mapStateToPropsForRedirect)(\r\n// //   AuthRedirectComponent\r\n// // );\r\n// const DialogsContainer = connect(mapStateToProps, mapDispatchToProps)(Dialogs);\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, mapDispatchToProps),\r\n  AuthRedirect\r\n)(Dialogs);\r\n"],"sourceRoot":""}